cmake_minimum_required(VERSION 3.16)
project(DigitalGainHalideTest)

# Set C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Find required packages
find_package(OpenCV REQUIRED)
find_package(Eigen3 REQUIRED)
find_package(yaml-cpp REQUIRED)
find_package(Halide REQUIRED)

# Enable hybrid backend for this test
option(USE_HYBRID_BACKEND "Enable hybrid backend with Halide support" ON)

if(USE_HYBRID_BACKEND)
    add_compile_definitions(USE_HYBRID_BACKEND)
    add_compile_definitions(YAML_CPP_API)
endif()

# Set YAML_CPP_API for DLL import
add_compile_definitions(YAML_CPP_API)

# Include directories
include_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}
    ${OpenCV_INCLUDE_DIRS}
    ${EIGEN3_INCLUDE_DIR}
    ${yaml-cpp_INCLUDE_DIRS}
    ${HALIDE_INCLUDE_DIRS}
)

# Create test executable
add_executable(test_digital_gain_halide
    test_digital_gain_halide.cpp
    src/common/eigen_utils.cpp
    src/common/halide_utils.cpp
    src/modules/digital_gain/digital_gain.cpp
    src/modules/digital_gain/digital_gain_halide.cpp
)

# Link libraries
target_link_libraries(test_digital_gain_halide
    ${OpenCV_LIBS}
    ${EIGEN3_LIBRARIES}
    ${yaml-cpp_LIBRARIES}
    ${HALIDE_LIBRARIES}
)

# Set output directory
set_target_properties(test_digital_gain_halide PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
) 