cmake_minimum_required(VERSION 3.10)

# Add vcpkg toolchain file
set(CMAKE_TOOLCHAIN_FILE "C:/vcpkg/scripts/buildsystems/vcpkg.cmake" CACHE STRING "Vcpkg toolchain file")

project(HDR_ISP_Hybrid_Test)

# Set C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Define project root directory for use in C++ code
add_compile_definitions(PROJECT_ROOT_DIR="${CMAKE_SOURCE_DIR}")

# Optional hybrid backend support
option(USE_HYBRID_BACKEND "Enable hybrid backend with Halide support" OFF)

# Find required packages
find_package(OpenCV REQUIRED)

# Optional Halide package
if(USE_HYBRID_BACKEND)
    find_package(Halide QUIET)
    if(Halide_FOUND)
        add_compile_definitions(USE_HYBRID_BACKEND)
        message(STATUS "Halide found - hybrid backend enabled")
    else()
        message(WARNING "Halide not found - hybrid backend disabled")
        set(USE_HYBRID_BACKEND OFF)
    endif()
endif()

# Include directories
include_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}
    ${OpenCV_INCLUDE_DIRS}
)

# Add Halide include directories if available
if(USE_HYBRID_BACKEND AND Halide_FOUND)
    include_directories(${HALIDE_INCLUDE_DIRS})
endif()

# Add source directory for common components
add_subdirectory(src)

# Create test executable
add_executable(test_hybrid_backend test_hybrid_backend.cpp)

# Link dependencies to the test executable
target_link_libraries(test_hybrid_backend
    PRIVATE
        common
        ${OpenCV_LIBS}
)

# Add Halide libraries if available
if(USE_HYBRID_BACKEND AND Halide_FOUND)
    target_link_libraries(test_hybrid_backend PRIVATE ${HALIDE_LIBRARIES})
endif() 